<?php

/**
 * @file
 * The consent management platform implementation via LiveRamp.
 */

use Drupal\Core\Cache\CacheableMetadata;
use Drupal\Core\Render\Markup;

/**
 * Implements hook_module_implements_alter().
 */
function burda_cmp_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'library_info_alter') {
    // Move this hook implementation to the end of the list.
    // \Drupal::moduleHandler()->getImplementations()
    // iterates through $implementations with a foreach loop which PHP iterates
    // in the order that the items were added, so to move an item to the end of
    // the array, we remove it and then add it.
    $group = $implementations['burda_cmp'];
    unset($implementations['burda_cmp']);
    $implementations['burda_cmp'] = $group;
  }
}

/**
 * Implements hook_library_info_alter().
 */
function burda_cmp_library_info_alter(&$libraries, $extension) {
  /** @var \Drupal\burda_cmp\StaticConsentDataInterface $static_consent_data */
  $static_consent_data = \Drupal::service('burda_cmp.static_consent_data');

  // Process all registered JavaScript files that need to be only loaded when a
  // consent is given. Therefore information about these files are added to
  // 'burda_cmp' module's JavaScript settings and loaded dynamically based on
  // the consent status.
  foreach ($libraries as $name => &$library) {
    if (!empty($library['js'])) {
      foreach ($library['js'] as $js => &$definition) {
        if (isset($definition['burda_cmp'])) {
          // Ensure numeric vendor ID.
          if (!empty($definition['burda_cmp']['vendor'])) {
            $definition['burda_cmp']['vendorId'] = $static_consent_data->getVendorId($definition['burda_cmp']['vendor']);
          }

          // Determine purposes by vendor (if empty).
          if (!empty($definition['burda_cmp']['vendor'])) {
            if (empty($definition['burda_cmp']['purposes'])) {
              $definition['burda_cmp']['purposeIds'] = $static_consent_data->getPurposeIds($definition['burda_cmp']['vendor']);
            }
          }

          if (!empty($definition['burda_cmp']['vendor'])) {
            // Overwrite attribute text/javascript to text/plain
            if (!isset($definition['attributes'])) {
              $definition['attributes'] = [];
            }
            $definition['attributes']['type'] = 'text/plain';
            $definition['attributes']['data-burda-cmp-conditional-scripts'] = '';
            $definition['attributes']['data-burda-cmp-vendor'] = $definition['burda_cmp']['vendor'];
            $definition['attributes']['data-burda-cmp-vendorId'] = $static_consent_data->getVendorId($definition['burda_cmp']['vendor']);
            $definition['attributes']['data-burda-cmp-purposeIds'] = implode(',',
              $static_consent_data->getPurposeIds($definition['burda_cmp']['vendor']));
          }
        }
      }
    }
  }
}

/**
 * Implements hook_page_attachments().
 */
function burda_cmp_page_attachments(array &$page) {
  /** @var \Drupal\Core\Config\ImmutableConfig $config */
  $config = \Drupal::config('burda_cmp.settings');
  $sourcepoint_script_url = $config->get('sourcepoint_script_url');
  $sourcepoint_shim_script = $config->get('sourcepoint_shim_script');
  $sourcepoint_config_code = $config->get('sourcepoint_config_code');

  CacheableMetadata::createFromRenderArray($page)
    ->addCacheableDependency($config)
    ->applyTo($page);

  if ($sourcepoint_shim_script) {
    $page['#attached']['html_head'][] = [
      [
        '#tag' => 'script',
        '#attributes' => [
          'type' => 'text/javascript',
          'data-sourcepoint' => 'shim-script',
        ],
        '#weight' => -102,
        '#value' => Markup::create($sourcepoint_shim_script),
      ],
      'burda_cmp_init_shim',
    ];
  }

  if ($sourcepoint_config_code) {
    $page['#attached']['html_head'][] = [
      [
        '#type' => 'html_tag',
        '#tag' => 'script',
        '#attributes' => [
          'type' => 'text/javascript',
          'data-sourcepoint' => 'config-code',
        ],
        '#weight' => -101,
        '#value' => Markup::create($sourcepoint_config_code),
      ],
      'burda_cmp_init_config',
    ];
  }

  if ($sourcepoint_script_url) {
    $page['#attached']['html_head'][] = [
      [
        '#tag' => 'script',
        '#attributes' => [
          'type' => 'text/javascript',
          'src' => $sourcepoint_script_url,
          'data-sourcepoint' => 'script-url',
        ],
        '#weight' => -100,
      ],
      'burda_cmp_init_script',
    ];
  }
}

/**
 * Implements hook_theme().
 */
function burda_cmp_theme($existing, $type, $theme, $path) {
  $items = [];

  // Conditional content (only displayed when specific consent is given).
  $items['burda_cmp_conditional_content'] = [
    'variables' => [
      'content' => NULL,
      'message_preface' => NULL,
      'message_postscript' => NULL,
      'purposes' => [],
      'toggle_label' => NULL,
      'url_privacy_policy' => NULL,
      'vendor' => NULL,
      'vendor_label' => NULL,
    ],
    'file' => 'burda_cmp.theme.inc',
  ];

  return $items;
}
